//////////////
//// 8XD
//// TI-8X Program Decompiler
//// (C) Lambda 2016
//////////////

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _8XDcs
{
    class Program
    {
        public static Dictionary<ulong, string> Tokens = new Dictionary<ulong, string>();

        public static string BytesArrayToString(byte[] ba)
        {
            string hex = BitConverter.ToString(ba);
            return hex.Replace("-", " ");
        }

        public static byte[] ProcessFile(string path)
        {
            byte[] header = new byte[8];
            byte[] cmpheader = { 0x2A, 0x2a, 0x54, 0x49, 0x38, 0x33, 0x46, 0x2A };
            byte[] buffer = File.ReadAllBytes(path);
            Array.Copy(buffer, 0, header, 0, 8);

            if (!(Enumerable.SequenceEqual(header, cmpheader))) {
                // This is a problem, exit.
            }
            
            return buffer;
        }

        public static void Detokenize()
        {
            
        }

        static void Main(string[] args)
        {
            Console.OutputEncoding = Encoding.UTF8;

            Console.WriteLine("8XD Version 1.0");
            Console.WriteLine("(c) Lambda 2016");

            FillTokensMap();

            Console.ReadKey();
        }
        
        static void FillTokensMap()
        {
            Tokens.Add(0x00, " ");
            Tokens.Add(0x01, "►DMS");
            Tokens.Add(0x02, "►Dec");
            Tokens.Add(0x03, "►Frac");
            Tokens.Add(0x04, "→");
            Tokens.Add(0x05, "Boxplot");
            Tokens.Add(0x06, "[");
            Tokens.Add(0x07, "]");
            Tokens.Add(0x08, "{");
            Tokens.Add(0x09, "}");
            Tokens.Add(0x0A, "ʳ");
            Tokens.Add(0x0B, "°");
            Tokens.Add(0x0C, "ˉ¹");
            Tokens.Add(0x0D, "²");
            Tokens.Add(0x0E, "ᵀ");
            Tokens.Add(0x0F, "³");
            Tokens.Add(0x10, "(");
            Tokens.Add(0x11, ")");
            Tokens.Add(0x12, "round(");
            Tokens.Add(0x13, "pxl-Test(");
            Tokens.Add(0x14, "augment(");
            Tokens.Add(0x15, "rowSwap(");
            Tokens.Add(0x16, "row+(");
            Tokens.Add(0x17, "*row(");
            Tokens.Add(0x18, "*row+(");
            Tokens.Add(0x19, "max(");
            Tokens.Add(0x1A, "min(");
            Tokens.Add(0x1B, "R►Pr(");
            Tokens.Add(0x1C, "R►Pθ(");
            Tokens.Add(0x1D, "P►Rx(");
            Tokens.Add(0x1E, "P►Ry(");
            Tokens.Add(0x1F, "median(");
            Tokens.Add(0x20, "randM(");
            Tokens.Add(0x21, "mean(");
            Tokens.Add(0x22, "solve(");
            Tokens.Add(0x23, "seq(");
            Tokens.Add(0x24, "fnInt(");
            Tokens.Add(0x25, "nDeriv(");
            Tokens.Add(0x27, "fMin(");
            Tokens.Add(0x28, "fMax(");
            Tokens.Add(0x29, " ");
            Tokens.Add(0x2A, "\"");
            Tokens.Add(0x2B, ",");
            Tokens.Add(0x2C, "[i]");
            Tokens.Add(0x2D, "!");
            Tokens.Add(0x2E, "CubicReg ");
            Tokens.Add(0x2F, "QuartReg ");
            Tokens.Add(0x30, "0");
            Tokens.Add(0x31, "1");
            Tokens.Add(0x32, "2");
            Tokens.Add(0x33, "3");
            Tokens.Add(0x34, "4");
            Tokens.Add(0x35, "5");
            Tokens.Add(0x36, "6");
            Tokens.Add(0x37, "7");
            Tokens.Add(0x38, "8");
            Tokens.Add(0x39, "9");
            Tokens.Add(0x3A, ".");
            Tokens.Add(0x3B, "ᴇ");
            Tokens.Add(0x3C, " or ");
            Tokens.Add(0x3D, " xor ");
            Tokens.Add(0x3E, ":");
            Tokens.Add(0x3F, "");
            Tokens.Add(0x40, " and ");
            Tokens.Add(0x41, "A");
            Tokens.Add(0x42, "B");
            Tokens.Add(0x43, "C");
            Tokens.Add(0x44, "D");
            Tokens.Add(0x45, "E");
            Tokens.Add(0x46, "F");
            Tokens.Add(0x47, "G");
            Tokens.Add(0x48, "H");
            Tokens.Add(0x49, "I");
            Tokens.Add(0x4A, "J");
            Tokens.Add(0x4B, "K");
            Tokens.Add(0x4C, "L");
            Tokens.Add(0x4D, "M");
            Tokens.Add(0x4E, "N");
            Tokens.Add(0x4F, "O");
            Tokens.Add(0x50, "P");
            Tokens.Add(0x51, "Q");
            Tokens.Add(0x52, "R");
            Tokens.Add(0x53, "S");
            Tokens.Add(0x54, "T");
            Tokens.Add(0x55, "U");
            Tokens.Add(0x56, "V");
            Tokens.Add(0x57, "W");
            Tokens.Add(0x58, "X");
            Tokens.Add(0x59, "Y");
            Tokens.Add(0x5A, "Z");
            Tokens.Add(0x5B, "θ");
            Tokens.Add(0x5C00, "[A]");
            Tokens.Add(0x5C01, "[B]");
            Tokens.Add(0x5C02, "[C]");
            Tokens.Add(0x5C03, "[D]");
            Tokens.Add(0x5C04, "[E]");
            Tokens.Add(0x5C05, "[F]");
            Tokens.Add(0x5C06, "[G]");
            Tokens.Add(0x5C07, "[H]");
            Tokens.Add(0x5C08, "[I]");
            Tokens.Add(0x5C09, "[J]");
            Tokens.Add(0x5D00, "L₁");
            Tokens.Add(0x5D01, "L₂");
            Tokens.Add(0x5D02, "L₃");
            Tokens.Add(0x5D03, "L₄");
            Tokens.Add(0x5D04, "L₅");
            Tokens.Add(0x5D05, "L₆");
            Tokens.Add(0x5E10, "Y₁");
            Tokens.Add(0x5E11, "Y₂");
            Tokens.Add(0x5E12, "Y₃");
            Tokens.Add(0x5E13, "Y₄");
            Tokens.Add(0x5E14, "Y₅");
            Tokens.Add(0x5E15, "Y₆");
            Tokens.Add(0x5E16, "Y₇");
            Tokens.Add(0x5E17, "Y₈");
            Tokens.Add(0x5E18, "Y₉");
            Tokens.Add(0x5E19, "Y₀");
            Tokens.Add(0x5E20, "X₁ᴛ");
            Tokens.Add(0x5E21, "Y₁ᴛ");
            Tokens.Add(0x5E22, "X₂ᴛ");
            Tokens.Add(0x5E23, "Y₂ᴛ");
            Tokens.Add(0x5E24, "X₃ᴛ");
            Tokens.Add(0x5E25, "Y₃ᴛ");
            Tokens.Add(0x5E26, "X₄ᴛ");
            Tokens.Add(0x5E27, "Y₄ᴛ");
            Tokens.Add(0x5E28, "X₅ᴛ");
            Tokens.Add(0x5E29, "Y₅ᴛ");
            Tokens.Add(0x5E2A, "X₆ᴛ");
            Tokens.Add(0x5E2B, "Y₆ᴛ");
            Tokens.Add(0x5E40, "r₁");
            Tokens.Add(0x5E41, "r₂");
            Tokens.Add(0x5E42, "r₃");
            Tokens.Add(0x5E43, "r₄");
            Tokens.Add(0x5E44, "r₅");
            Tokens.Add(0x5E45, "r₆");
            Tokens.Add(0x5E80, "|u");
            Tokens.Add(0x5E81, "|v");
            Tokens.Add(0x5E82, "|w");
            Tokens.Add(0x5F, "prgm");
            Tokens.Add(0x6000, "Pic1");
            Tokens.Add(0x6001, "Pic2");
            Tokens.Add(0x6002, "Pic3");
            Tokens.Add(0x6003, "Pic4");
            Tokens.Add(0x6004, "Pic5");
            Tokens.Add(0x6005, "Pic6");
            Tokens.Add(0x6006, "Pic7");
            Tokens.Add(0x6007, "Pic8");
            Tokens.Add(0x6008, "Pic9");
            Tokens.Add(0x6009, "Pic0");
            Tokens.Add(0x6100, "GDB1");
            Tokens.Add(0x6101, "GDB2");
            Tokens.Add(0x6102, "GDB3");
            Tokens.Add(0x6103, "GDB4");
            Tokens.Add(0x6104, "GDB5");
            Tokens.Add(0x6105, "GDB6");
            Tokens.Add(0x6106, "GDB7");
            Tokens.Add(0x6107, "GDB8");
            Tokens.Add(0x6108, "GDB9");
            Tokens.Add(0x6109, "GDB0");
            Tokens.Add(0x6201, "[RegEQ]");
            Tokens.Add(0x6202, "[n]");
            Tokens.Add(0x6203, "ẋ");
            Tokens.Add(0x6204, "Σx");
            Tokens.Add(0x6205, "Σx²");
            Tokens.Add(0x6206, "[Sx]");
            Tokens.Add(0x6207, "σx");
            Tokens.Add(0x6208, "[minX]");
            Tokens.Add(0x6209, "[maxX]");
            Tokens.Add(0x620A, "[minY]");
            Tokens.Add(0x620B, "[maxY]");
            Tokens.Add(0x620C, "ȳ");
            Tokens.Add(0x620D, "Σy");
            Tokens.Add(0x620E, "Σy²");
            Tokens.Add(0x620F, "[Sy]");
            Tokens.Add(0x6210, "σy");
            Tokens.Add(0x6211, "Σxy");
            Tokens.Add(0x6212, "[r]");
            Tokens.Add(0x6213, "[Med]");
            Tokens.Add(0x6214, "[Q1]");
            Tokens.Add(0x6215, "[Q3]");
            Tokens.Add(0x6216, "[|a]");
            Tokens.Add(0x6217, "[|b]");
            Tokens.Add(0x6218, "[|c]");
            Tokens.Add(0x6219, "[|d]");
            Tokens.Add(0x621A, "[|e]");
            Tokens.Add(0x621B, "x₁");
            Tokens.Add(0x621C, "x₂");
            Tokens.Add(0x621D, "x₃");
            Tokens.Add(0x621E, "y₁");
            Tokens.Add(0x621F, "y₂");
            Tokens.Add(0x6220, "y₃");
            Tokens.Add(0x6221, "[recursiven]");
            Tokens.Add(0x6222, "[p]");
            Tokens.Add(0x6223, "[z]");
            Tokens.Add(0x6224, "[t]");
            Tokens.Add(0x6225, "χ²");
            Tokens.Add(0x6226, "[|F]");
            Tokens.Add(0x6227, "[df]");
            Tokens.Add(0x6228, "[ṗ]");
            Tokens.Add(0x6229, "ṗ₁");
            Tokens.Add(0x622A, "ṗ₂");
            Tokens.Add(0x622B, "ẋ₁");
            Tokens.Add(0x622C, "Sx₁");
            Tokens.Add(0x622D, "n₁");
            Tokens.Add(0x622E, "ẋ₂");
            Tokens.Add(0x622F, "Sx₂");
            Tokens.Add(0x6230, "n₂");
            Tokens.Add(0x6231, "[Sxp]");
            Tokens.Add(0x6232, "[lower]");
            Tokens.Add(0x6233, "[upper]");
            Tokens.Add(0x6234, "[s]");
            Tokens.Add(0x6235, "r²");
            Tokens.Add(0x6236, "R²");
            Tokens.Add(0x6237, "[factordf]");
            Tokens.Add(0x6238, "[factorSS]");
            Tokens.Add(0x6239, "[factorMS]");
            Tokens.Add(0x623A, "[errordf]");
            Tokens.Add(0x623B, "[errorSS]");
            Tokens.Add(0x623C, "[errorMS]");
            Tokens.Add(0x6300, "ZXscl");
            Tokens.Add(0x6301, "ZYscl");
            Tokens.Add(0x6302, "Xscl");
            Tokens.Add(0x6303, "Yscl");
            Tokens.Add(0x6304, "u(nMin)");
            Tokens.Add(0x6305, "v(nMin)");
            Tokens.Add(0x6306, "Un-₁");
            Tokens.Add(0x6307, "Vn-₁");
            Tokens.Add(0x6308, "Zu(nmin)");
            Tokens.Add(0x6309, "Zv(nmin)");
            Tokens.Add(0x630A, "Xmin");
            Tokens.Add(0x630B, "Xmax");
            Tokens.Add(0x630C, "Ymin");
            Tokens.Add(0x630D, "Ymax");
            Tokens.Add(0x630E, "Tmin");
            Tokens.Add(0x630F, "Tmax");
            Tokens.Add(0x6310, "θMin");
            Tokens.Add(0x6311, "θMax");
            Tokens.Add(0x6312, "ZXmin");
            Tokens.Add(0x6313, "ZXmax");
            Tokens.Add(0x6314, "ZYmin");
            Tokens.Add(0x6315, "ZYmax");
            Tokens.Add(0x6316, "Zθmin");
            Tokens.Add(0x6317, "Zθmax");
            Tokens.Add(0x6318, "ZTmin");
            Tokens.Add(0x6319, "ZTmax");
            Tokens.Add(0x631A, "TblStart");
            Tokens.Add(0x631B, "PlotStart");
            Tokens.Add(0x631C, "ZPlotStart");
            Tokens.Add(0x631D, "nMax");
            Tokens.Add(0x631E, "ZnMax");
            Tokens.Add(0x631F, "nMin");
            Tokens.Add(0x6320, "ZnMin");
            Tokens.Add(0x6321, "∆Tbl");
            Tokens.Add(0x6322, "Tstep");
            Tokens.Add(0x6323, "θstep");
            Tokens.Add(0x6324, "ZTstep");
            Tokens.Add(0x6325, "Zθstep");
            Tokens.Add(0x6326, "∆X");
            Tokens.Add(0x6327, "∆Y");
            Tokens.Add(0x6328, "XFact");
            Tokens.Add(0x6329, "YFact");
            Tokens.Add(0x632A, "TblInput");
            Tokens.Add(0x632B, "|N");
            Tokens.Add(0x632C, "I%");
            Tokens.Add(0x632D, "PV");
            Tokens.Add(0x632E, "PMT");
            Tokens.Add(0x632F, "FV");
            Tokens.Add(0x6330, "|P/Y");
            Tokens.Add(0x6331, "|C/Y");
            Tokens.Add(0x6332, "w(nMin)");
            Tokens.Add(0x6333, "Zw(nMin)");
            Tokens.Add(0x6334, "PlotStep");
            Tokens.Add(0x6335, "ZPlotStep");
            Tokens.Add(0x6336, "Xres");
            Tokens.Add(0x6337, "ZXres");
            Tokens.Add(0x64, "Radian");
            Tokens.Add(0x65, "Degree");
            Tokens.Add(0x66, "Normal");
            Tokens.Add(0x67, "Sci");
            Tokens.Add(0x68, "Eng");
            Tokens.Add(0x69, "Float");
            Tokens.Add(0x6A, "=");
            Tokens.Add(0x6B, "<");
            Tokens.Add(0x6C, ">");
            Tokens.Add(0x6D, "≤");
            Tokens.Add(0x6E, "≥");
            Tokens.Add(0x6F, "≠");
            Tokens.Add(0x70, "+");
            Tokens.Add(0x71, "-");
            Tokens.Add(0x72, "Ans");
            Tokens.Add(0x73, "Fix ");
            Tokens.Add(0x74, "Horiz");
            Tokens.Add(0x75, "Full");
            Tokens.Add(0x76, "Func");
            Tokens.Add(0x77, "Param");
            Tokens.Add(0x78, "Polar");
            Tokens.Add(0x79, "Seq");
            Tokens.Add(0x7A, "IndpntAuto");
            Tokens.Add(0x7B, "IndpntAsk");
            Tokens.Add(0x7C, "DependAuto");
            Tokens.Add(0x7D, "DependAsk");
            Tokens.Add(0x7E00, "Sequential");
            Tokens.Add(0x7E01, "Simul");
            Tokens.Add(0x7E02, "PolarGC");
            Tokens.Add(0x7E03, "RectGC");
            Tokens.Add(0x7E04, "CoordOn");
            Tokens.Add(0x7E05, "CoordOff");
            Tokens.Add(0x7E06, "Thick");
            Tokens.Add(0x7E07, "Dot-Thick");
            Tokens.Add(0x7E08, "AxesOn");
            Tokens.Add(0x7E09, "AxesOff");
            Tokens.Add(0x7E0A, "GridDot ");
            Tokens.Add(0x7E0B, "GridOff");
            Tokens.Add(0x7E0C, "LabelOn");
            Tokens.Add(0x7E0D, "LabelOff");
            Tokens.Add(0x7E0E, "Web");
            Tokens.Add(0x7E0F, "Time");
            Tokens.Add(0x7E10, "uvAxes");
            Tokens.Add(0x7E11, "vwAxes");
            Tokens.Add(0x7E12, "uwAxes");
            Tokens.Add(0x7F, "plotsquare");
            Tokens.Add(0x80, "﹢");
            Tokens.Add(0x81, "·");
            Tokens.Add(0x82, "*");
            Tokens.Add(0x83, "/");
            Tokens.Add(0x84, "Trace");
            Tokens.Add(0x85, "ClrDraw");
            Tokens.Add(0x86, "ZStandard");
            Tokens.Add(0x87, "ZTrig");
            Tokens.Add(0x88, "ZBox");
            Tokens.Add(0x89, "Zoom In");
            Tokens.Add(0x8A, "Zoom Out");
            Tokens.Add(0x8B, "ZSquare");
            Tokens.Add(0x8C, "ZInteger");
            Tokens.Add(0x8D, "ZPrevious");
            Tokens.Add(0x8E, "ZDecimal");
            Tokens.Add(0x8F, "ZoomStat");
            Tokens.Add(0x90, "ZoomRcl");
            Tokens.Add(0x91, "PrintScreen");
            Tokens.Add(0x92, "ZoomSto");
            Tokens.Add(0x93, "Text(");
            Tokens.Add(0x94, " nPr ");
            Tokens.Add(0x95, " nCr ");
            Tokens.Add(0x96, "FnOn ");
            Tokens.Add(0x97, "FnOff ");
            Tokens.Add(0x98, "StorePic ");
            Tokens.Add(0x99, "RecallPic ");
            Tokens.Add(0x9A, "StoreGDB ");
            Tokens.Add(0x9B, "RecallGDB ");
            Tokens.Add(0x9C, "Line(");
            Tokens.Add(0x9D, "Vertical ");
            Tokens.Add(0x9E, "Pt-On(");
            Tokens.Add(0x9F, "Pt-Off(");
            Tokens.Add(0xA0, "Pt-Change(");
            Tokens.Add(0xA1, "Pxl-On(");
            Tokens.Add(0xA2, "Pxl-Off(");
            Tokens.Add(0xA3, "Pxl-Change(");
            Tokens.Add(0xA4, "Shade(");
            Tokens.Add(0xA5, "Circle(");
            Tokens.Add(0xA6, "Horizontal ");
            Tokens.Add(0xA7, "Tangent(");
            Tokens.Add(0xA8, "DrawInv ");
            Tokens.Add(0xA9, "DrawF ");
            Tokens.Add(0xAA00, "Str1");
            Tokens.Add(0xAA01, "Str2");
            Tokens.Add(0xAA02, "Str3");
            Tokens.Add(0xAA03, "Str4");
            Tokens.Add(0xAA04, "Str5");
            Tokens.Add(0xAA05, "Str6");
            Tokens.Add(0xAA06, "Str7");
            Tokens.Add(0xAA07, "Str8");
            Tokens.Add(0xAA08, "Str9");
            Tokens.Add(0xAA09, "Str0");
            Tokens.Add(0xAB, "rand");
            Tokens.Add(0xAC, "π");
            Tokens.Add(0xAD, "getKey");
            Tokens.Add(0xAE, "'");
            Tokens.Add(0xAF, "?");
            Tokens.Add(0xB0, "⁻");
            Tokens.Add(0xB1, "int(");
            Tokens.Add(0xB2, "abs(");
            Tokens.Add(0xB3, "det(");
            Tokens.Add(0xB330, "ReadLine(");
            Tokens.Add(0xB331, "ReplaceLine(");
            Tokens.Add(0xB331302B, "BufSpriteSelect(");
            Tokens.Add(0xB331312B, "ExecArcPrgm(");
            Tokens.Add(0xB331322B, "DispColor(");
            Tokens.Add(0xB332, "InsertLine(");
            Tokens.Add(0xB333, "SpecialChars(");
            Tokens.Add(0xB334, "CreateVar(");
            Tokens.Add(0xB335, "ArcUnarcVar(");
            Tokens.Add(0xB336, "DeleteVar(");
            Tokens.Add(0xB337, "DeleteLine(");
            Tokens.Add(0xB338, "VarStatus(");
            Tokens.Add(0xB3392B, "BufSprite(");
            Tokens.Add(0xB4, "identity(");
            Tokens.Add(0xB5, "dim(");
            Tokens.Add(0xB6, "sum(");
            Tokens.Add(0xB7, "prod(");
            Tokens.Add(0xB8, "not(");
            Tokens.Add(0xB9, "iPart(");
            Tokens.Add(0xBA, "fPart(");
            Tokens.Add(0xBB00, "npv(");
            Tokens.Add(0xBB01, "irr(");
            Tokens.Add(0xBB02, "bal(");
            Tokens.Add(0xBB03, "ΣPrn(");
            Tokens.Add(0xBB04, "ΣInt(");
            Tokens.Add(0xBB05, "►Nom(");
            Tokens.Add(0xBB06, "►Eff(");
            Tokens.Add(0xBB07, "dbd(");
            Tokens.Add(0xBB08, "lcm(");
            Tokens.Add(0xBB09, "gcd(");
            Tokens.Add(0xBB0A, "randInt(");
            Tokens.Add(0xBB0B, "randBin(");
            Tokens.Add(0xBB0C, "sub(");
            Tokens.Add(0xBB0D, "stdDev(");
            Tokens.Add(0xBB0E, "variance(");
            Tokens.Add(0xBB0F, "inString(");
            Tokens.Add(0xBB10, "normalcdf(");
            Tokens.Add(0xBB11, "invNorm(");
            Tokens.Add(0xBB12, "tcdf(");
            Tokens.Add(0xBB13, "χ²cdf(");
            Tokens.Add(0xBB14, "Fcdf(");
            Tokens.Add(0xBB15, "binompdf(");
            Tokens.Add(0xBB16, "binomcdf(");
            Tokens.Add(0xBB17, "poissonpdf(");
            Tokens.Add(0xBB18, "poissoncdf(");
            Tokens.Add(0xBB19, "geometpdf(");
            Tokens.Add(0xBB1A, "geometcdf(");
            Tokens.Add(0xBB1B, "normalpdf(");
            Tokens.Add(0xBB1C, "tpdf(");
            Tokens.Add(0xBB1D, "χ²pdf(");
            Tokens.Add(0xBB1E, "Fpdf(");
            Tokens.Add(0xBB1F, "randNorm(");
            Tokens.Add(0xBB20, "tvm_Pmt");
            Tokens.Add(0xBB21, "tvm_I%");
            Tokens.Add(0xBB22, "tvm_PV");
            Tokens.Add(0xBB23, "tvm_N");
            Tokens.Add(0xBB24, "tvm_FV");
            Tokens.Add(0xBB25, "conj(");
            Tokens.Add(0xBB26, "real(");
            /*
             * These are questionable
             * 
            Tokens.Add(0xBB26302B30, "GetxLIBVersion(");
            Tokens.Add(0xBB26302B312B, "SetUpGraphics(");
            Tokens.Add(0xBB26302B312B302B, "SetFullResolution(");
            Tokens.Add(0xBB26302B312B31, "SetHalfResolution(");
            Tokens.Add(0xBB26302B322B, "ChangeSpeed(");
            Tokens.Add(0xBB26302B322B30, "SetSpeed6MHz(");
            Tokens.Add(0xBB26302B322B31, "SetSpeed15MHz(");
            Tokens.Add(0xBB26302B332B, "SetupColorMode(");
            Tokens.Add(0xBB26312B302B, "GetUservar(");
            Tokens.Add(0xBB26312B312B, "SetUservar(");
            Tokens.Add(0xBB26312B322B, "AddToUservar(");
            Tokens.Add(0xBB26312B332B, "SubFromUservar(");
            Tokens.Add(0xBB26322B302B, "GetKeyCheckList(");
            Tokens.Add(0xBB26322B302B30, "GetKey(");
            Tokens.Add(0xBB26322B312B, "GetKeyArrows(");
            Tokens.Add(0xBB26322B322B, "GetKeyArrowsDiagonals(");
            Tokens.Add(0xBB26322B332B, "GetKeyArrowsCheckTile(");
            Tokens.Add(0xBB26322B342B, "GetKeyArrowsDiagonalsCheckTile(");
            Tokens.Add(0xBB26332B302B, "DrawMapA(");
            Tokens.Add(0xBB26332B312B, "DrawMapB(");
            Tokens.Add(0xBB26332B322B, "DrawMap_GetTileA(");
            Tokens.Add(0xBB26332B332B, "DrawMap_GetTileB(");
            Tokens.Add(0xBB26332B342B, "DrawMap_SetTile(");
            Tokens.Add(0xBB26332B352B, "DrawMap_ReplaceTile(");
            Tokens.Add(0xBB26332B362B, "DrawMap_GetSectionA(");
            Tokens.Add(0xBB26332B372B, "DrawMap_GetSectionB(");
            Tokens.Add(0xBB26342B302B, "DrawSpriteA(");
            Tokens.Add(0xBB26342B312B, "DrawSpriteB(");
            Tokens.Add(0xBB26342B322B, "DrawSpriteList8x8A(");
            Tokens.Add(0xBB26342B332B, "DrawSpriteList8x8B(");
            Tokens.Add(0xBB26342B342B, "DrawSpriteTileBGA(");
            Tokens.Add(0xBB26342B352B, "DrawSpriteTileBGB(");
            Tokens.Add(0xBB26352B302B, "LoadTilePic(");
            Tokens.Add(0xBB26352B312B, "LoadBGPic(");
            Tokens.Add(0xBB26352B322B, "DisplayBGPic(");
            Tokens.Add(0xBB26352B332B, "DrawPicSectionA(");
            Tokens.Add(0xBB26352B342B, "DrawPicSectionB(");
            Tokens.Add(0xBB26352B352B, "LoadSingleTile(");
            Tokens.Add(0xBB26362B302B, "DrawString(");
            Tokens.Add(0xBB26362B312B, "DrawStringValueA(");
            Tokens.Add(0xBB26362B322B, "DrawStringValueB(");
            Tokens.Add(0xBB26372B302B, "GetPixelA(");
            Tokens.Add(0xBB26372B312B, "GetPixelB(");
            Tokens.Add(0xBB26372B31302B, "InvertFilledRectangle(");
            Tokens.Add(0xBB26372B31312B, "DrawCircle(");
            Tokens.Add(0xBB26372B31322B, "DrawFilledCircle(");
            Tokens.Add(0xBB26372B322B, "SetPixelA(");
            Tokens.Add(0xBB26372B332B, "SetPixelB(");
            Tokens.Add(0xBB26372B342B, "InvertPixel(");
            Tokens.Add(0xBB26372B352B, "DrawLine(");
            Tokens.Add(0xBB26372B362B, "InvertLine(");
            Tokens.Add(0xBB26372B372B, "DrawRectangle(");
            Tokens.Add(0xBB26372B382B, "InvertRectangle(");
            Tokens.Add(0xBB26372B392B, "FillRectangle(");
            Tokens.Add(0xBB26382B30, "GetLCDBuffer(");
            Tokens.Add(0xBB26382B312B, "SetLCDBuffer(");
            Tokens.Add(0xBB26382B322B, "SetGRAMOffset(");
            Tokens.Add(0xBB26382B332B, "GetRand(");
            Tokens.Add(0xBB2639, "UpdateLCD(");
            */
            Tokens.Add(0xBB27, "imag(");
            Tokens.Add(0xBB28, "angle(");
            Tokens.Add(0xBB29, "cumSum(");
            Tokens.Add(0xBB2A, "expr(");
            Tokens.Add(0xBB2B, "length(");
            Tokens.Add(0xBB2C, "DeltaList(");
            Tokens.Add(0xBB2D, "ref(");
            Tokens.Add(0xBB2E, "rref(");
            Tokens.Add(0xBB2F, "►Rect");
            Tokens.Add(0xBB30, "►Polar");
            Tokens.Add(0xBB31, "[e]");
            Tokens.Add(0xBB32, "SinReg ");
            Tokens.Add(0xBB33, "Logistic ");
            Tokens.Add(0xBB34, "LinRegTTest ");
            Tokens.Add(0xBB35, "ShadeNorm(");
            Tokens.Add(0xBB36, "Shade_t(");
            Tokens.Add(0xBB37, "Shadeχ²(");
            Tokens.Add(0xBB38, "ShadeF(");
            Tokens.Add(0xBB39, "Matr►list(");
            Tokens.Add(0xBB3A, "List►matr(");
            Tokens.Add(0xBB3B, "Z-Test(");
            Tokens.Add(0xBB3C, "T-Test ");
            Tokens.Add(0xBB3D, "2-SampZTest(");
            Tokens.Add(0xBB3E, "1-PropZTest(");
            Tokens.Add(0xBB3F, "2-PropZTest(");
            Tokens.Add(0xBB40, "χ²-Test(");
            Tokens.Add(0xBB41, "ZInterval");
            Tokens.Add(0xBB42, "2-SampZInt(");
            Tokens.Add(0xBB43, "1-PropZInt(");
            Tokens.Add(0xBB44, "2-PropZInt(");
            Tokens.Add(0xBB45, "GraphStyle(");
            Tokens.Add(0xBB46, "2-SampTTest ");
            Tokens.Add(0xBB47, "2-SampFTest ");
            Tokens.Add(0xBB48, "TInterval ");
            Tokens.Add(0xBB49, "2-SampTInt ");
            Tokens.Add(0xBB4A, "SetUpEditor ");
            Tokens.Add(0xBB4B, "Pmt_End");
            Tokens.Add(0xBB4C, "Pmt_Bgn");
            Tokens.Add(0xBB4D, "Real");
            Tokens.Add(0xBB4E, "re^θi");
            Tokens.Add(0xBB4F, "a+bi");
            Tokens.Add(0xBB50, "ExprOn");
            Tokens.Add(0xBB51, "ExprOff");
            Tokens.Add(0xBB52, "ClrAllLists");
            Tokens.Add(0xBB53, "GetCalc(");
            Tokens.Add(0xBB54, "DelVar ");
            Tokens.Add(0xBB55, "Equ►String(");
            Tokens.Add(0xBB56, "String►Equ(");
            Tokens.Add(0xBB57, "Clear Entries");
            Tokens.Add(0xBB58, "Select(");
            Tokens.Add(0xBB59, "ANOVA(");
            Tokens.Add(0xBB5A, "ModBoxPlot");
            Tokens.Add(0xBB5B, "NormProbPlot");
            Tokens.Add(0xBB64, "G-T");
            Tokens.Add(0xBB65, "ZoomFit");
            Tokens.Add(0xBB66, "DiagnosticOn");
            Tokens.Add(0xBB67, "DiagnosticOff");
            Tokens.Add(0xBB68, "Archive ");
            Tokens.Add(0xBB69, "UnArchive ");
            Tokens.Add(0xBB6A, "Asm(");
            Tokens.Add(0xBB6B, "AsmComp(");
            Tokens.Add(0xBB6C, "AsmPrgm");
            Tokens.Add(0xBB6E, "Á");
            Tokens.Add(0xBB6F, "À");
            Tokens.Add(0xBB70, "Â");
            Tokens.Add(0xBB71, "Ä");
            Tokens.Add(0xBB72, "á");
            Tokens.Add(0xBB73, "à");
            Tokens.Add(0xBB74, "â");
            Tokens.Add(0xBB75, "ä");
            Tokens.Add(0xBB76, "É");
            Tokens.Add(0xBB77, "È");
            Tokens.Add(0xBB78, "Ê");
            Tokens.Add(0xBB79, "Ë");
            Tokens.Add(0xBB7A, "é");
            Tokens.Add(0xBB7B, "è");
            Tokens.Add(0xBB7C, "ê");
            Tokens.Add(0xBB7D, "ë");
            Tokens.Add(0xBB7F, "Ì");
            Tokens.Add(0xBB80, "Î");
            Tokens.Add(0xBB81, "Ï");
            Tokens.Add(0xBB82, "í");
            Tokens.Add(0xBB83, "ì");
            Tokens.Add(0xBB84, "î");
            Tokens.Add(0xBB85, "ï");
            Tokens.Add(0xBB86, "Ó");
            Tokens.Add(0xBB87, "Ò");
            Tokens.Add(0xBB88, "Ô");
            Tokens.Add(0xBB89, "Ö");
            Tokens.Add(0xBB8A, "ó");
            Tokens.Add(0xBB8B, "ò");
            Tokens.Add(0xBB8C, "ô");
            Tokens.Add(0xBB8D, "ö");
            Tokens.Add(0xBB8E, "Ú");
            Tokens.Add(0xBB8F, "Ù");
            Tokens.Add(0xBB90, "Û");
            Tokens.Add(0xBB91, "Ü");
            Tokens.Add(0xBB92, "ú");
            Tokens.Add(0xBB93, "ù");
            Tokens.Add(0xBB94, "û");
            Tokens.Add(0xBB95, "ü");
            Tokens.Add(0xBB96, "Ç");
            Tokens.Add(0xBB97, "ç");
            Tokens.Add(0xBB98, "Ñ");
            Tokens.Add(0xBB99, "ñ");
            Tokens.Add(0xBB9A, "´");
            Tokens.Add(0xBB9B, "|`");
            Tokens.Add(0xBB9C, "¨");
            Tokens.Add(0xBB9D, "¿");
            Tokens.Add(0xBB9E, "¡");
            Tokens.Add(0xBB9F, "α");
            Tokens.Add(0xBBA0, "β");
            Tokens.Add(0xBBA1, "γ");
            Tokens.Add(0xBBA2, "Δ");
            Tokens.Add(0xBBA3, "δ");
            Tokens.Add(0xBBA4, "ε");
            Tokens.Add(0xBBA5, "λ");
            Tokens.Add(0xBBA6, "μ");
            Tokens.Add(0xBBA7, "|π");
            Tokens.Add(0xBBA8, "ρ");
            Tokens.Add(0xBBA9, "Σ");
            Tokens.Add(0xBBAB, "Φ");
            Tokens.Add(0xBBAC, "Ω");
            Tokens.Add(0xBBAD, "ṗ");
            Tokens.Add(0xBBAE, "χ");
            Tokens.Add(0xBBAF, "|F");
            Tokens.Add(0xBBB0, "a");
            Tokens.Add(0xBBB1, "b");
            Tokens.Add(0xBBB2, "c");
            Tokens.Add(0xBBB3, "d");
            Tokens.Add(0xBBB4, "e");
            Tokens.Add(0xBBB5, "f");
            Tokens.Add(0xBBB6, "g");
            Tokens.Add(0xBBB7, "h");
            Tokens.Add(0xBBB8, "i");
            Tokens.Add(0xBBB9, "j");
            Tokens.Add(0xBBBA, "k");
            Tokens.Add(0xBBBC, "l");
            Tokens.Add(0xBBBD, "m");
            Tokens.Add(0xBBBE, "n");
            Tokens.Add(0xBBBF, "o");
            Tokens.Add(0xBBC0, "p");
            Tokens.Add(0xBBC1, "q");
            Tokens.Add(0xBBC2, "r");
            Tokens.Add(0xBBC3, "s");
            Tokens.Add(0xBBC4, "t");
            Tokens.Add(0xBBC5, "u");
            Tokens.Add(0xBBC6, "v");
            Tokens.Add(0xBBC7, "w");
            Tokens.Add(0xBBC8, "x");
            Tokens.Add(0xBBC9, "y");
            Tokens.Add(0xBBCA, "z");
            Tokens.Add(0xBBCB, "σ");
            Tokens.Add(0xBBCC, "τ");
            Tokens.Add(0xBBCD, "Í");
            Tokens.Add(0xBBCE, "GarbageCollect");
            Tokens.Add(0xBBCF, "|~");
            Tokens.Add(0xBBD1, "@");
            Tokens.Add(0xBBD2, "#");
            Tokens.Add(0xBBD3, "$");
            Tokens.Add(0xBBD4, "&");
            Tokens.Add(0xBBD5, "`");
            Tokens.Add(0xBBD6, ";");
            Tokens.Add(0xBBD7, "\\");
            Tokens.Add(0xBBD8, "|");
            Tokens.Add(0xBBD9, "_");
            Tokens.Add(0xBBDA, "%");
            Tokens.Add(0xBBDB, "…");
            Tokens.Add(0xBBDC, "∠");
            Tokens.Add(0xBBDD, "ß");
            Tokens.Add(0xBBDE, "ˣ");
            Tokens.Add(0xBBDF, "ᴛ");
            Tokens.Add(0xBBE0, "₀");
            Tokens.Add(0xBBE1, "₁");
            Tokens.Add(0xBBE2, "₂");
            Tokens.Add(0xBBE3, "₃");
            Tokens.Add(0xBBE4, "₄");
            Tokens.Add(0xBBE5, "₅");
            Tokens.Add(0xBBE6, "₆");
            Tokens.Add(0xBBE7, "₇");
            Tokens.Add(0xBBE8, "₈");
            Tokens.Add(0xBBE9, "₉");
            Tokens.Add(0xBBEA, "₁₀");
            Tokens.Add(0xBBEB, "◄");
            Tokens.Add(0xBBEC, "►");
            Tokens.Add(0xBBED, "↑");
            Tokens.Add(0xBBEE, "↓");
            Tokens.Add(0xBBF0, "×");
            Tokens.Add(0xBBF1, "∫");
            Tokens.Add(0xBBF2, "bolduparrow");
            Tokens.Add(0xBBF3, "bolddownarrow");
            Tokens.Add(0xBBF4, "√");
            Tokens.Add(0xBBF5, "invertedequal");
            Tokens.Add(0xBC, "√(");
            Tokens.Add(0xBD, "³√(");
            Tokens.Add(0xBE, "ln(");
            Tokens.Add(0xBF, "e^(");
            Tokens.Add(0xC0, "log(");
            Tokens.Add(0xC1, "₁₀^(");
            Tokens.Add(0xC2, "sin(");
            Tokens.Add(0xC3, "sin⁻¹(");
            Tokens.Add(0xC4, "cos(");
            Tokens.Add(0xC5, "cos⁻¹(");
            Tokens.Add(0xC6, "tan(");
            Tokens.Add(0xC7, "tan⁻¹(");
            Tokens.Add(0xC8, "sinh(");
            Tokens.Add(0xC9, "sinh⁻¹(");
            Tokens.Add(0xCA, "cosh(");
            Tokens.Add(0xCB, "soch⁻¹(");
            Tokens.Add(0xCC, "tanh(");
            Tokens.Add(0xCD, "tanh⁻¹(");
            Tokens.Add(0xCE, "If ");
            Tokens.Add(0xCF, "Then");
            Tokens.Add(0xD0, "Else");
            Tokens.Add(0xD1, "While ");
            Tokens.Add(0xD2, "Repeat ");
            Tokens.Add(0xD3, "For(");
            Tokens.Add(0xD4, "End");
            Tokens.Add(0xD5, "Return");
            Tokens.Add(0xD6, "Lbl ");
            Tokens.Add(0xD7, "Goto ");
            Tokens.Add(0xD8, "Pause ");
            Tokens.Add(0xD9, "Stop");
            Tokens.Add(0xDA, "IS>(");
            Tokens.Add(0xDB, "DS<(");
            Tokens.Add(0xDC, "Input ");
            Tokens.Add(0xDD, "Prompt ");
            Tokens.Add(0xDE, "Disp ");
            Tokens.Add(0xDF, "DispGraph");
            Tokens.Add(0xE0, "Output(");
            Tokens.Add(0xE1, "ClrHome");
            Tokens.Add(0xE2, "Fill(");
            Tokens.Add(0xE3, "SortA(");
            Tokens.Add(0xE4, "SortD(");
            Tokens.Add(0xE5, "DispTable");
            Tokens.Add(0xE6, "Menu(");
            Tokens.Add(0xE7, "Send(");
            Tokens.Add(0xE8, "Get(");
            Tokens.Add(0xE9, "PlotsOn ");
            Tokens.Add(0xEA, "PlotsOff ");
            Tokens.Add(0xEB, "ʟ");
            Tokens.Add(0xEC, "Plot1(");
            Tokens.Add(0xED, "Plot2(");
            Tokens.Add(0xEE, "Plot3(");
            Tokens.Add(0xEF00, "setDate(");
            Tokens.Add(0xEF01, "setTime(");
            Tokens.Add(0xEF02, "checkTmr(");
            Tokens.Add(0xEF03, "setDtFmt(");
            Tokens.Add(0xEF04, "setTmFmt(");
            Tokens.Add(0xEF05, "timeCnv(");
            Tokens.Add(0xEF06, "dayOfWk(");
            Tokens.Add(0xEF07, "getDtStr");
            Tokens.Add(0xEF08, "getTmStr(");
            Tokens.Add(0xEF09, "getDate");
            Tokens.Add(0xEF0A, "getTime");
            Tokens.Add(0xEF0B, "startTmr");
            Tokens.Add(0xEF0C, "getDtFmt");
            Tokens.Add(0xEF0D, "getTmFmt");
            Tokens.Add(0xEF0E, "isClockOn");
            Tokens.Add(0xEF0F, "ClockOff");
            Tokens.Add(0xEF10, "ClockOn");
            Tokens.Add(0xEF11, "OpenLib(");
            Tokens.Add(0xEF12, "ExecLib");
            Tokens.Add(0xEF13, "invT(");
            Tokens.Add(0xEF14, "χ²GOF-Test(");
            Tokens.Add(0xEF15, "LinRegTInt ");
            Tokens.Add(0xEF16, "Manual-Fit ");
            Tokens.Add(0xEF17, "ZQuadrant1");
            Tokens.Add(0xEF18, "ZFrac1/2");
            Tokens.Add(0xEF19, "ZFrac1/3");
            Tokens.Add(0xEF1A, "ZFrac1/4");
            Tokens.Add(0xEF1B, "ZFrac1/5");
            Tokens.Add(0xEF1C, "ZFrac1/8");
            Tokens.Add(0xEF1D, "ZFrac1/10");
            Tokens.Add(0xEF1E, "mathprintbox");
            Tokens.Add(0xEF2E, "⁄");
            Tokens.Add(0xEF2F, "ᵤ");
            Tokens.Add(0xEF30, "►n⁄d◄►Un⁄d");
            Tokens.Add(0xEF31, "►F◄►D");
            Tokens.Add(0xEF32, "remainder(");
            Tokens.Add(0xEF33, "Σ(");
            Tokens.Add(0xEF34, "logBASE(");
            Tokens.Add(0xEF35, "randIntNoRep(");
            Tokens.Add(0xEF37, "[MATHPRINT]");
            Tokens.Add(0xEF38, "[CLASSIC]");
            Tokens.Add(0xEF39, "n⁄d");
            Tokens.Add(0xEF3A, "Un⁄d");
            Tokens.Add(0xEF3B, "[AUTO]");
            Tokens.Add(0xEF3C, "[DEC]");
            Tokens.Add(0xEF3D, "[FRAC]");
            Tokens.Add(0xEF41, "BLUE");
            Tokens.Add(0xEF42, "RED");
            Tokens.Add(0xEF43, "BLACK");
            Tokens.Add(0xEF44, "MAGENTA");
            Tokens.Add(0xEF45, "GREEN");
            Tokens.Add(0xEF46, "ORANGE");
            Tokens.Add(0xEF47, "BROWN");
            Tokens.Add(0xEF48, "NAVY");
            Tokens.Add(0xEF49, "LTBLUE");
            Tokens.Add(0xEF4A, "YELLOW");
            Tokens.Add(0xEF4B, "WHITE");
            Tokens.Add(0xEF4C, "LTGREY");
            Tokens.Add(0xEF4D, "MEDGREY");
            Tokens.Add(0xEF4E, "GREY");
            Tokens.Add(0xEF4F, "DARKGREY");
            Tokens.Add(0xEF5A, "GridLine ");
            Tokens.Add(0xEF5B, "BackgroundOn ");
            Tokens.Add(0xEF6A, "DetectAsymOn");
            Tokens.Add(0xEF6B, "DetectAsymOff");
            Tokens.Add(0xEF64, "BackgroundOff");
            Tokens.Add(0xEF65, "GraphColor(");
            Tokens.Add(0xEF67, "TextColor(");
            Tokens.Add(0xEF68, "Asm84CPrgm");
            Tokens.Add(0xEF6C, "BorderColor ");
            Tokens.Add(0xEF73, "tinydotplot");
            Tokens.Add(0xEF74, "Thin");
            Tokens.Add(0xEF75, "Dot-Thin");
            Tokens.Add(0xF0, "^");
            Tokens.Add(0xF1, "ˣ√");
            Tokens.Add(0xF2, "1-Var Stats ");
            Tokens.Add(0xF3, "2-Var Stats");
            Tokens.Add(0xF4, "LinReg(a+bx) ");
            Tokens.Add(0xF5, "ExpReg ");
            Tokens.Add(0xF6, "LnReg ");
            Tokens.Add(0xF7, "PwrReg ");
            Tokens.Add(0xF8, "Med-Med ");
            Tokens.Add(0xF9, "QuadReg ");
            Tokens.Add(0xFA, "ClrList ");
            Tokens.Add(0xFB, "ClrTable");
            Tokens.Add(0xFC, "Histogram");
            Tokens.Add(0xFD, "xyLine");
            Tokens.Add(0xFE, "Scatter");
            Tokens.Add(0xFF, "LinReg(ax+b)");
        }
    }
}
